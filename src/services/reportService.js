import { loadJSPDFLibrary, loadAutoTableLibrary } from '../utils/lazyImports';

class ReportService {
  async generateScreeningReport(dossierName, results) {
    const [{ default: jsPDF }, autoTable] = await Promise.all([
      loadJSPDFLibrary(),
      loadAutoTableLibrary()
    ]);
    
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(16);
    doc.text('NAFDAC Dossier Screening Report', 14, 20);
    
    doc.setFontSize(12);
    doc.text(`Dossier: ${dossierName}`, 14, 35);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 45);
    doc.text(`Time: ${new Date().toLocaleTimeString()}`, 14, 55);
    
    // Summary
    const presentCount = results.filter(r => r.status.includes('✅')).length;
    const totalCount = results.length;
    const completionRate = ((presentCount / totalCount) * 100).toFixed(1);
    
    doc.setFontSize(14);
    doc.text('Summary', 14, 75);
    doc.setFontSize(11);
    doc.text(`Documents Found: ${presentCount} of ${totalCount} (${completionRate}%)`, 14, 85);
    
    // Results table
    const tableData = results.map(result => [
      result.path,
      result.description,
      result.status.replace('✅ ', '').replace('❌ ', ''),
      result.status.includes('✅') ? 'Present' : 'Missing'
    ]);
    
    doc.autoTable({
      startY: 95,
      head: [['Required Document', 'Description', 'Status', 'Result']],
      body: tableData,
      styles: { 
        fontSize: 8, 
        cellPadding: 3,
        overflow: 'linebreak',
        columnWidth: 'wrap'
      },
      headStyles: { 
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 60 },
        1: { cellWidth: 50 },
        2: { cellWidth: 25 },
        3: { cellWidth: 25 }
      },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      margin: { top: 95, left: 14, right: 14 }
    });
    
    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(
        `Page ${i} of ${pageCount} - Generated by NAFDAC Dossier Screener`,
        14,
        doc.internal.pageSize.height - 10
      );
    }
    
    // Save the PDF
    const fileName = `${dossierName.replace(/[^a-zA-Z0-9]/g, '_')}_Screening_Report_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    return fileName;
  }
  
  async generateComplianceReport(dossierName, results) {
    const { default: jsPDF } = await loadJSPDFLibrary();
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(16);
    doc.text('NAFDAC Dossier Compliance Report', 14, 20);
    
    doc.setFontSize(12);
    doc.text(`Dossier: ${dossierName}`, 14, 35);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 45);
    
    // Compliance by module
    const moduleGroups = this.groupResultsByModule(results);
    let yPosition = 65;
    
    Object.entries(moduleGroups).forEach(([module, moduleResults]) => {
      const presentCount = moduleResults.filter(r => r.status.includes('✅')).length;
      const totalCount = moduleResults.length;
      const compliance = ((presentCount / totalCount) * 100).toFixed(1);
      
      doc.setFontSize(12);
      doc.text(`${module}: ${compliance}% (${presentCount}/${totalCount})`, 14, yPosition);
      yPosition += 10;
    });
    
    // Save the PDF
    const fileName = `${dossierName.replace(/[^a-zA-Z0-9]/g, '_')}_Compliance_Report_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    return fileName;
  }
  
  async generateInternalReport(dossierName, responses, notes, checklist) {
    const [{ default: jsPDF }, autoTable] = await Promise.all([
      loadJSPDFLibrary(),
      loadAutoTableLibrary()
    ]);
    
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(16);
    doc.text('NAFDAC Internal Review Report', 14, 20);
    
    doc.setFontSize(12);
    doc.text(`Dossier: ${dossierName}`, 14, 35);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 45);
    doc.text(`Time: ${new Date().toLocaleTimeString()}`, 14, 55);
    
    // Summary
    const completenessItems = checklist.filter(item => !item.excludeFromCompleteness);
    const answered = completenessItems.filter(item => responses.has(item.id)).length;
    const yesCount = Array.from(responses.values()).filter(r => r === 'yes').length;
    const noCount = Array.from(responses.values()).filter(r => r === 'no').length;
    const partialCount = Array.from(responses.values()).filter(r => r === 'partial').length;
    const complianceRate = answered > 0 ? Math.round(((yesCount + partialCount * 0.5) / answered) * 100) : 0;
    
    doc.setFontSize(14);
    doc.text('Summary', 14, 75);
    doc.setFontSize(11);
    doc.text(`Questions Answered: ${answered} of ${completenessItems.length}`, 14, 85);
    doc.text(`Compliance Rate: ${complianceRate}%`, 14, 95);
    doc.text(`Yes: ${yesCount} | Partial: ${partialCount} | No: ${noCount}`, 14, 105);
    
    // Results table
    const tableData = checklist.map(item => {
      const response = responses.get(item.id) || 'Not answered';
      const note = notes.get(item.id) || '';
      return [
        item.section,
        item.question.length > 60 ? item.question.substring(0, 60) + '...' : item.question,
        item.moduleRef,
        response === 'yes' ? 'Yes' : response === 'no' ? 'No' : response === 'partial' ? 'Partial' : 'N/A',
        note.length > 40 ? note.substring(0, 40) + '...' : note
      ];
    });
    
    doc.autoTable({
      startY: 115,
      head: [['Section', 'Question', 'Module', 'Response', 'Notes']],
      body: tableData,
      styles: { 
        fontSize: 8, 
        cellPadding: 2,
        overflow: 'linebreak'
      },
      headStyles: { 
        fillColor: [41, 128, 185],
        textColor: 255,
        fontStyle: 'bold'
      },
      columnStyles: {
        0: { cellWidth: 25 },
        1: { cellWidth: 60 },
        2: { cellWidth: 30 },
        3: { cellWidth: 20 },
        4: { cellWidth: 35 }
      },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      margin: { top: 115, left: 14, right: 14 }
    });
    
    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.text(
        `Page ${i} of ${pageCount} - NAFDAC Internal Review Report`,
        14,
        doc.internal.pageSize.height - 10
      );
    }
    
    // Save the PDF
    const fileName = `${dossierName.replace(/[^a-zA-Z0-9]/g, '_')}_Internal_Review_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    return fileName;
  }
  
  groupResultsByModule(results) {
    const groups = {};
    
    results.forEach(result => {
      const moduleName = result.path.split('/')[0] || 'Other';
      if (!groups[moduleName]) {
        groups[moduleName] = [];
      }
      groups[moduleName].push(result);
    });
    
    return groups;
  }
}

export const reportService = new ReportService();